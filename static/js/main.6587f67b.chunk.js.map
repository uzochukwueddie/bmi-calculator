{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","getBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","heightToMeter","bmi","Math","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","setBmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","document","getElementById"],"mappings":"sPAoCeA,EAjCG,SAAAC,GAAU,IAEpBC,EAKAD,EALAC,KACAC,EAIAF,EAJAE,KACAC,EAGAH,EAHAG,MACAC,EAEAJ,EAFAI,MACAC,EACAL,EADAK,SAGJ,OACI,yBAAKC,UAAU,gBACX,0BAAMA,UAAU,SAASH,GACzB,yBAAKG,UAAU,mBACX,2BACIJ,KAAMA,EACND,KAAMA,EACNK,UAAU,cACVF,MAAOA,EACPC,SAAUA,EACVE,aAAa,aC8GlBC,EA/HO,SAAAR,GAAU,IACpBS,EAAgBT,EAAhBS,YADmB,EAGSC,mBAAS,MAHlB,mBAGpBC,EAHoB,KAGRC,EAHQ,OAISF,mBAAS,MAJlB,mBAIpBG,EAJoB,KAIRC,EAJQ,OAKHJ,mBAAS,UALN,mBAKpBK,EALoB,KAKdC,EALc,OAMDN,mBAAS,CAC/BO,YAAa,IACbC,YAAa,IACbC,YAAa,MATU,mBAMpBC,EANoB,KAMbC,EANa,KAYnBJ,EAA0CG,EAA1CH,YAAaC,EAA6BE,EAA7BF,YAAaC,EAAgBC,EAAhBD,YAGlCG,qBAAU,WACNC,EAAUN,EAAaE,GACvBK,EAAYP,EAAaE,EAAaD,KAGvC,CAACD,EAAaE,EAAaD,IAE9B,IAAMO,EAAgB,SAAAC,GAAM,IAAD,EACCA,EAAEC,OAAlB1B,EADe,EACfA,KAAMG,EADS,EACTA,MACdiB,GAAS,SAAAO,GAAS,sBAAUA,EAAV,eAAsB3B,EAAOG,QAc7CmB,EAAY,SAACM,EAAQC,GACvB,GAAID,EAAS,GAAKC,EAAS,EAAG,CAC1B,IAAMC,EAAgBF,EAAS,IACzBG,EAAMF,GAAUC,EAAgBA,GACtCtB,EAAYwB,KAAKC,MAAMF,MAIzBR,EAAc,SAACK,EAAQC,EAAQK,GACjC,GAAIN,EAAS,GAAKC,EAAS,GAAKK,EAAS,EAAG,CAIxC,IAAMC,EAA2B,GAATP,EAAeQ,SAASF,GAC1CH,EAAaF,GAAUM,EAAiBA,GAAlC,IACZ3B,EAAYwB,KAAKC,MAAMF,MAkB/B,OACI,oCACI,yBAAK1B,UAAU,cACX,yBAAKA,UAAU,iBACX,6BACI,0BAAMA,UAAU,cAAhB,QACA,yBAAKA,UAAU,QACX,4BACIL,KAAK,OACLG,MAAOW,EACPV,SAtDR,SAAAqB,GAChBV,EAAQU,EAAEC,OAAOvB,OACM,WAAnBsB,EAAEC,OAAOvB,OACTQ,EAAc,MACdE,EAAc,QAEdF,EAAc,MACdE,EAAc,SAgDMR,UAAU,gCAEV,4BAAQF,MAAM,UAAd,UACA,4BAAQA,MAAM,YAAd,eAIZ,kBAAC,EAAD,CACIF,KAAK,OACLD,KAAK,cACLE,MAAK,kBAAaQ,EAAb,KACLP,MAAOa,EACPZ,SAAUoB,IAGD,aAATV,EACA,kBAAC,EAAD,CACIb,KAAK,OACLD,KAAK,cACLE,MAAK,QACLC,MAAOc,EACPb,SAAUoB,IACT,GAET,kBAAC,EAAD,CACIvB,KAAK,OACLD,KAAK,cACLE,MAAK,kBAAaU,EAAb,KACLT,MAAOe,EACPd,SAAUoB,KAIlB,4BAAQnB,UAAU,SAASJ,KAAK,SAASoC,QA1DnC,SAAAZ,GACdA,EAAEa,iBAEF9B,EAAY,GACZO,EAAQ,UACRK,EAAS,CACLJ,YAAa,IACbC,YAAa,IACbC,YAAa,MAEjBP,EAAc,MACdE,EAAc,QA+CN,YCtED0B,EA9CH,WAAO,IAGKR,EAHN,EACkBtB,mBAAS,GAD3B,mBACP+B,EADO,KACGC,EADH,KAiBRC,GAdcX,EAcYS,IAbjB,GAAKT,GAAO,KAAa,cAChCA,GAAO,MAAQA,GAAO,KAAa,gBACnCA,GAAO,MAAQA,GAAO,KAAa,aACnCA,GAAO,GAAW,aAAtB,EAWAY,EAAW,GAKf,OAJIH,EAAW,GAAKE,IAChBC,EAAWD,EAAYE,MAAM,KAAK,GAAGC,eAIrC,oCACI,yBAAKxC,UAAU,aACXyC,MAAO,CAAEC,gBAhBM,SAAAhB,GACvB,OAAIA,GAAO,GAAKA,GAAO,KAAa,UAChCA,GAAO,MAAQA,GAAO,KAAa,UACnCA,GAAO,MAAQA,GAAO,KAAa,UACnCA,GAAO,GAAW,eAAtB,EAYkCiB,CAAmBR,KAE7C,0DACA,yBAAKnC,UAAU,wBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBAAf,2BAC6BmC,GAE7B,yBAAKnC,UAAS,uBAAkBsC,IAC3BD,KAKb,kBAAC,EAAD,CAAgBlC,YAAaiC,OC3B9BQ,EAZH,WACV,OACE,yBAAK5C,UAAU,iBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,4BACb,kBAAC,EAAD,UCJV6C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.6587f67b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormInput = props => {\n    const {\n        name,\n        type,\n        title,\n        value,\n        onChange\n    } = props;\n\n    return (\n        <div className=\"input-groups\">\n            <span className=\"label\">{title}</span>\n            <div className=\"range-container\">\n                <input \n                    type={type}\n                    name={name}\n                    className=\"range-input\"\n                    value={value}\n                    onChange={onChange}\n                    autoComplete=\"false\"\n                />\n            </div>\n        </div>\n    )\n}\n\nFormInput.propTypes = {\n    title: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    type: PropTypes.oneOf(['text'])\n}\n\nexport default FormInput;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport FormInput from './FormInput';\n\nconst BmiCalculator = props => {\n    const { getBmiValue } = props;\n\n    const [heightUnit, setHeightUnit] = useState('cm');\n    const [weightUnit, setWeightUnit] = useState('kg');\n    const [unit, setUnit] = useState('Metric');\n    const [count, setCount] = useState({\n        heightCount: '0',\n        inchesCount: '0',\n        weightCount: '0'\n    });\n\n    const { heightCount, inchesCount, weightCount } = count;\n\n\n    useEffect(() => {\n        metricBMI(heightCount, weightCount);\n        imperialBMI(heightCount, weightCount, inchesCount);\n        \n        // eslint-disable-next-line\n    }, [heightCount, weightCount, inchesCount]);\n\n    const onChangeInput = e => {\n        const { name, value } = e.target;\n        setCount(prevState => ({ ...prevState, [name]: value }));\n    }\n\n    const onSelectTag = e => {\n        setUnit(e.target.value);\n        if (e.target.value === 'Metric') {\n            setHeightUnit('cm');\n            setWeightUnit('kg');\n        } else {\n            setHeightUnit('ft');\n            setWeightUnit('lbs');\n        }\n    }\n\n    const metricBMI = (height, weight) => {\n        if (height > 0 && weight > 0) {\n            const heightToMeter = height / 100;\n            const bmi = weight / (heightToMeter * heightToMeter);\n            getBmiValue(Math.round(bmi));\n        }\n    }\n\n    const imperialBMI = (height, weight, inches) => {\n        if (height > 0 && weight > 0 && inches > 0) {\n            // 12 inches make a foot\n            // convert feet to inches\n            // add it to the inches value\n            const heightToInches = (height * 12) + parseInt(inches);\n            const bmi = 703 * (weight / (heightToInches * heightToInches));\n            getBmiValue(Math.round(bmi));\n        }\n    }\n\n    const resetData = e => {\n        e.preventDefault();\n\n        getBmiValue(0);\n        setUnit('Metric');\n        setCount({\n            heightCount: '0',\n            inchesCount: '0',\n            weightCount: '0'\n        });\n        setHeightUnit('cm');\n        setWeightUnit('kg');\n    }\n\n    return (\n        <>\n            <div className=\"bmi-inputs\">\n                <div className=\"inputs-fields\">\n                    <div>\n                        <span className=\"label-unit\">Unit</span>\n                        <div className=\"unit\">\n                            <select\n                                name=\"unit\"\n                                value={unit}\n                                onChange={onSelectTag}\n                                className=\"form-control form-control-sm\"\n                            >\n                                <option value=\"Metric\">Metric</option>\n                                <option value=\"Imperial\">Imperial</option>\n                            </select>\n                        </div>\n                    </div>\n                    <FormInput \n                        type=\"text\"\n                        name=\"heightCount\"\n                        title={`Height (${heightUnit})`}\n                        value={heightCount}\n                        onChange={onChangeInput}\n                    />\n                    {\n                        unit === 'Imperial' ?\n                        <FormInput \n                            type=\"text\"\n                            name=\"inchesCount\"\n                            title={` (in)`}\n                            value={inchesCount}\n                            onChange={onChangeInput}\n                        /> : ''\n                    }\n                    <FormInput \n                        type=\"text\"\n                        name=\"weightCount\"\n                        title={`Weight (${weightUnit})`}\n                        value={weightCount}\n                        onChange={onChangeInput}\n                    />\n                </div>\n\n                <button className=\"button\" type=\"submit\" onClick={resetData}>\n                    Reset\n                </button>\n            </div>\n        </>\n    )\n}\n\nBmiCalculator.propTypes = {\n    getBmiValue: PropTypes.func.isRequired\n}\n\nexport default BmiCalculator;\n","import React, { useState } from 'react';\n\nimport BmiCalculator from './BmiCalculator';\n\nconst BMI = () => {\n    const [bmiValue, setBmiValue] = useState(0);\n\n    const getBmiClass = bmi => {\n        if (bmi >= 1 && bmi <= 18.5) return 'Underweight';\n        if (bmi >= 18.5 && bmi <= 24.9) return 'Normal Weight';\n        if (bmi >= 24.9 && bmi <= 29.9) return 'Overweight';\n        if (bmi >= 30) return 'Obese';\n    }\n\n    const bmiBackgroundColor = bmi => {\n        if (bmi >= 1 && bmi <= 18.5) return '#FED88B';\n        if (bmi >= 18.5 && bmi <= 24.9) return '#80ff80';\n        if (bmi >= 24.9 && bmi <= 29.9) return '#FF7F50';\n        if (bmi >= 30) return '#FF5411';\n    }\n\n    const bmiCategory = getBmiClass(bmiValue);\n    let bmiClass = '';\n    if (bmiValue > 0 && bmiCategory) {\n        bmiClass = bmiCategory.split(' ')[0].toLowerCase();\n    }\n\n    return (\n        <>\n            <div className=\"calculator\"\n                style={{ backgroundColor: bmiBackgroundColor(bmiValue) }}\n            >\n                <h3>Body Mass Index Calculator</h3>\n                <div className=\"bmi-result-container\">\n                    <div className=\"bmi-result\">\n                        <div className=\"bmi-result-number\">\n                            Body Mass Index (BMI) = {bmiValue}\n                        </div>\n                        <div className={`bmi-category ${bmiClass}`}>\n                            {bmiCategory}\n                        </div>\n                    </div>\n                </div>\n\n                <BmiCalculator  getBmiValue={setBmiValue} />\n            </div>\n        </>\n    )\n}\n\nexport default BMI;\n","import React from 'react';\n\nimport './App.css';\nimport BMI from './components/BMI';\n\nconst App = () => {\n  return (\n    <div className=\"App container\">\n      <div className=\"row justify-content-center\">\n        <div className=\"col-lg-6 col-lg-offset-3\">\n          <BMI />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}